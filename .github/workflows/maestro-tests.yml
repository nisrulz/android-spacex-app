name: Maestro Android Tests

on:
  # Allows to run this workflow when a commit it pushed to the specified branches
  push:
    paths-ignore:
      - "**/*.md"
    branches:
      - main
  # Allows to run this workflow when a Pull Request is made with the set target branches
  pull_request:
    #
    paths-ignore:
      - "**/*.md"
    branches:
      - main
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  # Limit concurrency to 1 for PRs. 'main' concurrency isn't limited.
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    permissions: # Specify the required permissions
      issues: write # For writing comments on issues and pull requests
      pull-requests: write # For interacting with pull request data
      pages: write # Needed to push changes to the gh-pages branch
    # if: github.actor == 'dependabot[bot]'
    steps:
      - name: Checkout code at the latest commit in branch
        id: checkout-code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup and validate gradle wrapper
        # Will automatically perform wrapper validation on each execution.
        uses: gradle/actions/setup-gradle@v4
        continue-on-error: true
        timeout-minutes: 5

      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"

      - name: Cache Gradle and wrapper
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Start Android Emulator and Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          profile: pixel_6_pro
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -no-metrics
          emulator-boot-timeout: 600
          disable-animations: true
          script: |
            ./scripts/setup_maestro.sh
            ./scripts/install_app.sh
            ./scripts/run_maestro.sh
      
      - name: Deploy Test Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./ # Directory containing the renamed file
          publish_branch: gh-pages
          keep_files: true

      - name: Create or Update Pull Request Comment
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const pr_number = context.payload.pull_request.number;

            // Define the identifier to search for the comment
            const commentIdentifier = "### Test Report";

            // Fetch all comments on the pull request
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });

            // Search for the comment containing the identifier
            const existingComment = comments.data.find(comment =>
              comment.body.startsWith(commentIdentifier)
            );

            // Generate the timestamp and report URL
            const timestamp = new Date().toLocaleString("en-GB").replace(/\/|,|:/g, "").replace(" ", "_").trim();
            const report_url = `https://${context.repo.owner}.github.io/${context.repo.repo}/maestro_test_result_${timestamp}.html`;

            // Content for the test report comment
            const commentBody = `${commentIdentifier}\nYou can view the latest test report [here](${report_url}).`;

            if (existingComment) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              // Create a new comment if no existing comment is found
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: commentBody,
              });
            }
